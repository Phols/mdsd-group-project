/*
 * Suggestions for individual portfolio.

(0) Fix minor issues i.e. clumsy metamodel.

(1) Remedy shortcomings: general requirements on models (any boolean condition similar to entity example﻿﻿﻿﻿), general boolean conditions﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿ on methods, fixing the issue of overwriting POM and properties files.

(2) Minor extensions: connecting the data model to an existing database (perhaps mapping between the two data models?), separating data model and and service definitions.﻿﻿

(3) Major extensions: the ability to define "abstract" spring boot projects i.e. with a partial data model and partial set of services, maybe even allowing different abstract projects to be combined?
 
 
 */

grammar dk.sdu.mmmi.SpringBoard with org.eclipse.xtext.common.Terminals

generate springBoard "http://www.sdu.dk/mmmi/SpringBoard"

SpringBoard:
	'package' ':' pkg=Package 'models' ':' types+=Model+ 'services' ':' services+=Service+	
;

Package:
	name=ID ('.' next=Package)?
;

Model:
	name=ID inh=Inherit? '{' fields+=Field* '}'
;

Field:
	name=ID ':' type=Type (inv=Invariant)?
;

Invariant:
	'[' prop=Property op=Operator value=INT ']'
;

Property:
	'length'
;

Operator returns Operator:
	{Lt} '<' | {Gt} '>' | {Eq} '=' | {Lteq} '<=' | {Gteq} '>=' | {Neq} '<>'
;

Type returns Type:
	{Str} 'string' | {Dt} 'datetime' | {Lon} 'long' | {Int} 'int' | {Bool} 'bool' | {Flt} 'float' | {ModelType} (base=[Model] direction='*'?) | {ListOf} ('List' 'of' type=Type) | {Identifier} 'ID'
;

Inherit:
	'inherits' base=[Model]
;

Service:
	base=[Model] '{' crud=CRUD? methods+=Method* '}'
;

CRUD:
	'[' act += CRUDActions* ']'
;

enum CRUDActions:
	C | R | U | D
;

Method:
	req=Request name=ID inp=Input ':' type=Type res=Res?
;

Request returns Request:
	{Local} 'local' | {Post} 'POST' | {Get} 'GET' | {Put} 'PUT' | {Delete} 'DELETE'
;

Res:
	'{' comp=Comp'}'
;

Comp:
	left=[Args] op=Operator right=[Field]
;

Input:
	{Input} '(' args=Args? ')'
;

Args:
	name=ID ':' type=Type (',' next=Args)?
;

