/*
 * generated by Xtext 2.20.0
 */
package dk.sdu.mmmi.validation

import org.eclipse.xtext.validation.Check
import dk.sdu.mmmi.springBoard.CRUD
import java.util.regex.Pattern
import dk.sdu.mmmi.springBoard.Model
import dk.sdu.mmmi.springBoard.SpringBoardPackage
import dk.sdu.mmmi.springBoard.Identifier

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class SpringBoardValidator extends AbstractSpringBoardValidator {
	
//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					SpringBoardPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}

	Pattern cPattern = Pattern.compile("([C]).*([C])")
	Pattern rPattern = Pattern.compile("([R]).*([R])")
	Pattern uPattern = Pattern.compile("([U]).*([U])")
	Pattern dPattern = Pattern.compile("([D]).*([D])")

	@Check
	def checkCrudActions(CRUD crud) {
		
		val matchString = crud.getAct().toString().replace(", ", "")

		val cMatcher = cPattern.matcher(matchString);
		
		if (cMatcher.find()) {
			error('Only one Create method allowed', crud, null);
		}
		
		val rMatcher = rPattern.matcher(matchString);
		
		if (rMatcher.find()) {
			error('Only one Read method allowed', crud, null);
		}
		
		val uMatcher = uPattern.matcher(matchString);
		
		if (uMatcher.find()) {
			error('Only one Update method allowed', crud , null);
		}
		
		val dMatcher = dPattern.matcher(matchString);
		
		if (dMatcher.find()) {
			error('Only one Delete method allowed', crud, null);
		}
		
	}
	
	/**
	 * Inspired by Bettini
	 */
	@Check
	def checkNoCycleInEntityHierarchy(Model model) {
		if (model.inh.base === null)
			return // nothing to check
		val visitedEntities = newHashSet(model)
		var current = model.inh.base
		while (current !== null) {
			if (visitedEntities.contains(current)) {
				error("Cycle in hierarchy of model '"+current.name+"'",
					SpringBoardPackage.Literals.MODEL__INH)
				return
			}
			visitedEntities.add(current)
			current = current.inh.base
		}
	}
	
	@Check
	def checkOnlySingleIdForModel(Model model) {
		if (model.inh !== null) {
			if (!model.fields.filter[ f | f.type instanceof Identifier].empty) {
				error("Subclasses must not have an ID field.", SpringBoardPackage.Literals.MODEL__FIELDS)
			}
		} else {
			System.out.println(model.fields.filter[ f | f.type instanceof Identifier].size)
			if (model.fields.filter[ f | f.type instanceof Identifier].size != 1) {
				error("A model must have a single ID field.", SpringBoardPackage.Literals.MODEL__NAME)
			}
		}
		
		
	}
}
